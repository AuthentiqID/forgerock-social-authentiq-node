#
# The contents of this file are subject to the terms of the Common Development and
# Distribution License (the License). You may not use this file except in compliance with the
# License.
#
# You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the
# specific language governing permission and limitations under the License.
#
# When distributing Covered Software, include this CDDL Header Notice in each file and include
# the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL
# Header, with the fields enclosed by brackets [] replaced by your own identifying
# information: "Portions copyright [year] [name of copyright owner]".
#
# Copyright 2018 ForgeRock AS.
#

nodeDescription=Social Authentiq

clientId=Client ID
clientId.help=Your Authentiq Client ID parameter as obtained from https://dashboard.authentiq.com/.
clientSecret=Client Secret
clientSecret.help=Your Authentiq Client Secret parameter as obtained from https://dashboard.authentiq.com/.
authorizeEndpoint=Authorization Endpoint
authorizeEndpoint.help=OIDC Authorization Endpoint for Authentiq. There's usually no need to change this.
tokenEndpoint=Token Endpoint
tokenEndpoint.help=OIDC Token Endpoint for Authentiq. There's usually no need to change this.
userInfoEndpoint=UserInfo Endpoint
userInfoEndpoint.help=OIDC UserInfo endpoint for Authentiq. There's usually no need to change this.
scopeString=OAuth Scope
scopeString.help=A space separated list of profile scopes. \
  Possible values are: <code>profile email phone aq:address aq:location aq:name aq:zoneinfo aq:locale aq:push</code>. \
  Suffix scopes with <code>~r</code> to mark them as required. \
  Also, <code>email</code> and <code>phone</code> scopes can be marked with <code>~s</code> to request a <strong>verified</strong> email address or phone number.
redirectURI=Redirect URL
redirectURI.help=Where to redirect Authentiq to after signing in. This must match the Redirect URL provided on https://dashboard.authentiq.com/, unless it is left empty there.
cfgAccountProviderClass=Account Provider
cfgAccountProviderClass.help=Name of the class implementing the account provider. \
  This class is used by the module to find the account from the attributes mapped by the Account Mapper \
  <code>org.forgerock.openam.authentication.modules.common.mapping.AccountProvider</code> interface. \
String constructor parameters can be provided by appending | separated values.
cfgAccountMapperClass=Account Mapper
cfgAccountMapperClass.help=Name of the class implementing the attribute mapping for the account search. \
This class is used by the module to map from the account information received from the OAuth Identity Provider into OpenAM. \
The class must implement the <code>org.forgerock.openam.authentication.modules.common.mapping.AttributeMapper</code> interface. \
Provided implementations are: <code>org.forgerock.openam.authentication.modules.common.mapping.JsonAttributeMapper org.forgerock.openam.authentication.modules.oidc.JwtAttributeMapper</code>\
   (can only be used when using the openid scope) \
String constructor parameters can be provided by appending | separated values.
cfgAttributeMappingClasses=Attribute Mapper
cfgAttributeMappingClasses.help=Name of the class that implements the attribute mapping \
This class maps the OAuth properties into OpenAM properties. A custom attribute mapper can be provided. \
A custom attribute mapper must implement the org.forgerock.openam.authentication.modules.common.mapping.AttributeMapper interface. \
Provided implementations are: org.forgerock.openam.authentication.modules.common.mapping.JsonAttributeMapper org.forgerock.openam.authentication.modules.oidc.JwtAttributeMapper (can only be used when using the openid scope)
cfgAccountMapperConfiguration=Account Mapper Configuration
cfgAccountMapperConfiguration.help=Mapping of OAuth account to local OpenAM account \
Attribute configuration that will be used to map the account of the user authenticated in the OAuth 2.0 \
Provider to the local data store in the OpenAM. Example: <code>OAuth2.0_attribute=local_attribute</code>
cfgAttributeMappingConfiguration=Attribute Mapper Configuration
cfgAttributeMappingConfiguration.help=Mapping of OAuth attributes to local OpenAM attributes \
Attribute configuration that will be used to map the user info obtained from the OAuth 2.0 Provider to the local user data store in the OpenAM. \
Example: OAuth2.0_attribute=local_attribute
saveUserAttributesToSession=Save Attributes in the Session
saveUserAttributesToSession.help=If this option is enabled, the attributes configured in the attribute mapper will be saved into the OpenAM session
cfgMixUpMitigation=OAuth 2.0 Mix-Up Mitigation Enabled
cfgMixUpMitigation.help=Enables OAuth 2.0 mix-up mitigation \
The authorization server must support the OAuth 2.0 Mix-Up Mitigation draft \
  (https://tools.ietf.org/html/draft-ietf-oauth-mix-up-mitigation-01#section-3.1), \
  otherwise OpenAM will fail to validate responses from the authorization server. \
  If only the OAuth 2.0 protocol is utilized, make sure that the accepted issuer value is set in the "Token Issuer" setting.
issuer=Issuer
issuer.help=This should match the Authentiq Base URL: https://connect.authentiq.io/